{"version":3,"sources":["blog/code/Code.tsx","blog/text/Text.tsx","blog/Blog.tsx"],"names":["Code","code","useTrue","bools","val","forEach","bool","current","highlightedCode","isString","useRef","nextString","currentString","isEscaped","isProperty","isObject","escapeHighlight","isClass","isKeyword","keywords","split","map","piece","test","toUpperCase","className","useFalse","includes","key","Math","random","useHighlight","Text","text","Blog","retrieve","postTitleURLParam","useParams","useState","data","author","content","createdAt","Date","toDateString","title","link","suggestions","post","setPost","useEffect","a","type","href","target","rel","src","alt","console","log","suggestion","to","process"],"mappings":"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","file":"static/js/3.733107d6.chunk.js","sourcesContent":["/* eslint-disable react-hooks/rules-of-hooks */\n\nimport React, { MutableRefObject, useRef } from \"react\";\n\nimport \"./code.css\";\nimport \"../../syntax/syntax.css\";\n\ninterface Props {\n  code: string;\n}\n\nconst Code: React.FC<Props> = ({ code }) => {\n  const useFalse = (bools: MutableRefObject<boolean>[], val?: string) => {\n    bools.forEach((bool: MutableRefObject<boolean>) => {\n      bool.current = false;\n    });\n    return val || \"\";\n  };\n\n  const useTrue = (bools: MutableRefObject<boolean>[], val?: string) => {\n    bools.forEach((bool: MutableRefObject<boolean>) => {\n      bool.current = true;\n    });\n    return val || \"\";\n  };\n\n  const useFlip = (bools: MutableRefObject<boolean>[], val?: string) => {\n    bools.forEach((bool: MutableRefObject<boolean>) => {\n      bool.current = !bool.current;\n    });\n    return val || \"\";\n  };\n\n  const useHighlight = (code: string) => {\n    let isString = useRef<boolean>(false);\n    let nextString = useRef<boolean>(false);\n    let currentString = useRef<string>(\"\");\n    let isEscaped = useRef<boolean>(false);\n    let isProperty = useRef<boolean>(false);\n    let isObject = useRef<boolean>(false);\n    let escapeHighlight = useRef<boolean>(false);\n    let isClass = useRef<boolean>(false);\n    let isKeyword = useRef<string>(\"\");\n\n    const keywords = [\n      \"break\",\n      \"case\",\n      \"catch\",\n      \"class\",\n      \"const\",\n      \"continue\",\n      \"debugger\",\n      \"default\",\n      \"delete\",\n      \"do\",\n      \"else\",\n      \"export\",\n      \"extend\",\n      \"finally\",\n      \"for\",\n      \"function\",\n      \"if\",\n      \"import\",\n      \"in\",\n      \"instanceof\",\n      \"new\",\n      \"return\",\n      \"super\",\n      \"switch\",\n      \"this\",\n      \"throw\",\n      \"try\",\n      \"typeof\",\n      \"var\",\n      \"void\",\n      \"while\",\n      \"with\",\n      \"yield\",\n    ];\n\n    return code.split(\"\").map((piece: string) => {\n      if (piece === \"\\\\\" && !isString.current) isEscaped.current = true;\n\n      if (\n        (piece === '\"' || piece === \"'\" || piece === \"`\") &&\n        isString.current &&\n        piece === currentString.current\n      ) {\n        isString.current = false;\n        nextString.current = true;\n      } else if (\n        (piece === '\"' || piece === \"'\" || piece === \"`\") &&\n        !isString.current\n      ) {\n        isString.current = true;\n        currentString.current = piece;\n      }\n\n      if (!/[ .;[\\]{}<>]/gi.test(piece) && !isObject.current)\n        isProperty.current = !isProperty.current;\n      else isObject.current = true;\n\n      if (piece.toUpperCase() === piece && /\\w/.test(piece))\n        isClass.current = true;\n\n      if (/[.,:;()[\\]{}<>\\-+*/=|&~!@#$%^&?]/.test(piece)) {\n        escapeHighlight.current = true;\n        isClass.current = false;\n      } else escapeHighlight.current = false;\n\n      if (!/[a-zA-Z]/.test(piece)) isKeyword.current += piece;\n      else isKeyword.current = \"\";\n\n      let className = isString.current\n        ? \"string\"\n        : isEscaped.current\n        ? useFlip([isEscaped, isString], \"string\")\n        : escapeHighlight.current\n        ? useTrue([escapeHighlight], \"normal\")\n        : nextString.current\n        ? useFalse([nextString], \"string\")\n        : isClass.current\n        ? \"class\"\n        : keywords.includes(isKeyword.current)\n        ? \"keyword\"\n        : isObject.current\n        ? useTrue([isObject], \"var\")\n        : !isObject.current && isProperty\n        ? \"property\"\n        : \"normal\";\n\n      return (\n        <span className={className} key={Math.random()}>\n          {piece}\n        </span>\n      );\n    });\n  };\n\n  const highlightedCode = useHighlight(code);\n\n  return (\n    <div className=\"post-code\">\n      <pre className=\"light\">{highlightedCode}</pre>\n    </div>\n  );\n};\n\nexport default Code;\n","import React from \"react\";\n\nimport \"./text.css\";\n\ninterface Props {\n  text: string;\n}\n\nconst Text: React.FC<Props> = ({ text }) => {\n  return <p className=\"post-text\">{text}</p>;\n};\n\nexport default Text;\n","import React, { useEffect, useState } from \"react\";\nimport { Link, Redirect, useParams } from \"react-router-dom\";\n\nimport { Post } from \"../Post\";\n\nimport \"./blog.css\";\nimport Code from \"./code/Code\";\nimport \"./post.css\";\n\nimport Text from \"./text/Text\";\n\ninterface Params {\n  postTitleURLParam: string;\n}\n\ninterface Props {\n  retrieve: Function;\n}\n\nconst Blog: React.FC<Props> = ({ retrieve }) => {\n  const { postTitleURLParam } = useParams<Params>();\n\n  const [post, setPost] = useState<Post>({\n    data: {\n      author: \"\",\n      content: [],\n      createdAt: new Date().toDateString(),\n      title: \"\",\n      link: \"\",\n      suggestions: [],\n    },\n  });\n\n  useEffect(() => {\n    (async function () {\n      let mounted = true;\n\n      if (mounted) setPost(await retrieve(postTitleURLParam));\n\n      return () => (mounted = false);\n    })();\n  }, [postTitleURLParam, retrieve]);\n\n  if (!post) return <Redirect to=\"/something-went-wrong\" />;\n\n  return (\n    <article className=\"blog\">\n      <div className=\"post-meta\">\n        <h3 className=\"post-title\">{post.data.title}</h3>\n        <div className=\"post-info\">\n          <p className=\"post-timestamp\">{post.data.createdAt}</p>\n          <p className=\"post-author\">posted by {post.data.author}</p>\n        </div>\n      </div>\n      <div className=\"post-content\">\n        {post.data.content.map((content: { type: string; content: string }) => {\n          switch (content.type) {\n            case \"text\":\n              return <Text text={content.content} key={Math.random()} />;\n            case \"code\":\n              return <Code code={content.content} key={Math.random()} />;\n            case \"image\":\n              return (\n                <div className=\"post-image-container\">\n                  <a\n                    href={content.content}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                  >\n                    <img\n                      src={content.content}\n                      alt=\"\"\n                      key={Math.random()}\n                      className=\"post-image\"\n                    />\n                  </a>\n                </div>\n              );\n            default:\n              console.log(`Unsupported content type: ${content.type}`);\n              return <div key={Math.random()}></div>;\n          }\n        })}\n      </div>\n      <div className=\"post-suggestions-container\">\n        {post.data.suggestions ? (\n          <>\n            <h3 className=\"post-suggestions-title\">suggestions</h3>\n            <hr />\n          </>\n        ) : (\n          \"\"\n        )}\n        <ul className=\"post-suggestions\">\n          {post.data.suggestions?.map((suggestion) => (\n            <li className=\"post-suggestion\">\n              <Link to={`${process.env.PUBLIC_URL}/posts/${suggestion.link}`}>\n                {suggestion.title}\n              </Link>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </article>\n  );\n};\n\nexport default Blog;\n"],"sourceRoot":""}